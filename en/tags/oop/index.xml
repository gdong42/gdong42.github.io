<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>OOP on Gan&#39;s Blog - Dumps to digest.</title>
    <link>https://donggan.me/en/tags/oop/</link>
    <description>Recent content in OOP on Gan&#39;s Blog - Dumps to digest.</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 02 Sep 2019 21:28:38 +0800</lastBuildDate>
    
	<atom:link href="https://donggan.me/en/tags/oop/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Introduction to Factory Pattern (2): Factory Method</title>
      <link>https://donggan.me/en/post/factory-pattern-2-factory-method/</link>
      <pubDate>Mon, 02 Sep 2019 21:28:38 +0800</pubDate>
      
      <guid>https://donggan.me/en/post/factory-pattern-2-factory-method/</guid>
      <description>In my last article about Factory Pattern, a simple and intuitive method was introduced to encapsulate product creation logic without exposing details. The problem is that once we add a new concrete product call we have to modify the Factory class. It is not very flexible and requires the factory depending all concrete product types. Although class registration techniques can be used to eliminate the couplings in some extent, they still have some major drawbacks that prevent them to be used extensively.</description>
    </item>
    
    <item>
      <title>Introduction to Factory Pattern (1): Simple Factory Pattern</title>
      <link>https://donggan.me/en/post/factory-pattern-1-simple-factory-pattern/</link>
      <pubDate>Sun, 16 Dec 2018 00:15:26 +0800</pubDate>
      
      <guid>https://donggan.me/en/post/factory-pattern-1-simple-factory-pattern/</guid>
      <description>Nowadays, design patterns are not that popular to talk about. This could be related to the rapid iteration of web services, and the popularity of Micro Services. Design patterns were once considered useless dogma, thus as an anti-pattern, during the hype of Function Programming.
Of course, design patterns might have been thrown away as the essence of Object-Oriented Programming, because Functional Programming was preferred to OOP and was a hype during the time.</description>
    </item>
    
  </channel>
</rss>